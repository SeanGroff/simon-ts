// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    counter={0}
    power={true}
    startGameThunk={[Function]}
    toggleGamePowerAction={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": null,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <styled.div>
          <styled.span>
                    simon
          </styled.span>
</styled.div>,
        <styled.div>
          <styled.div>
                    <styled.span>
                              <styled.label
                                        hasPadding={true}
                              >
                                        count
                              </styled.label>
                              <Unknown
                                        count={0}
                                        on={true}
                              />
                    </styled.span>
                    <styled.span>
                              <styled.label
                                        hasPadding={true}
                              >
                                        start
                              </styled.label>
                              <StartStrictButton
                                        disabled={false}
                                        power={true}
                                        startButton={true}
                                        startGame={[Function]}
                              />
                    </styled.span>
                    <styled.span>
                              <styled.label
                                        hasPadding={true}
                              >
                                        strict
                              </styled.label>
                              <StartStrictButton
                                        disabled={false}
                                        power={true}
                                        startButton={false}
                              />
                    </styled.span>
          </styled.div>
          <styled.div>
                    <styled.label
                              hasMargin={true}
                    >
                              off
                    </styled.label>
                    <OnOffSwitch
                              power={true}
                              powerOnOff={[Function]}
                    />
                    <styled.label
                              hasMargin={true}
                    >
                              on
                    </styled.label>
          </styled.div>
</styled.div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": <styled.span>
            simon
</styled.span>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": "simon",
          },
          "ref": null,
          "rendered": "simon",
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": null,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.div>
              <styled.span>
                            <styled.label
                                          hasPadding={true}
                            >
                                          count
                            </styled.label>
                            <Unknown
                                          count={0}
                                          on={true}
                            />
              </styled.span>
              <styled.span>
                            <styled.label
                                          hasPadding={true}
                            >
                                          start
                            </styled.label>
                            <StartStrictButton
                                          disabled={false}
                                          power={true}
                                          startButton={true}
                                          startGame={[Function]}
                            />
              </styled.span>
              <styled.span>
                            <styled.label
                                          hasPadding={true}
                            >
                                          strict
                            </styled.label>
                            <StartStrictButton
                                          disabled={false}
                                          power={true}
                                          startButton={false}
                            />
              </styled.span>
</styled.div>,
            <styled.div>
              <styled.label
                            hasMargin={true}
              >
                            off
              </styled.label>
              <OnOffSwitch
                            power={true}
                            powerOnOff={[Function]}
              />
              <styled.label
                            hasMargin={true}
              >
                            on
              </styled.label>
</styled.div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": null,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.span>
                  <styled.label
                                    hasPadding={true}
                  >
                                    count
                  </styled.label>
                  <Unknown
                                    count={0}
                                    on={true}
                  />
</styled.span>,
                <styled.span>
                  <styled.label
                                    hasPadding={true}
                  >
                                    start
                  </styled.label>
                  <StartStrictButton
                                    disabled={false}
                                    power={true}
                                    startButton={true}
                                    startGame={[Function]}
                  />
</styled.span>,
                <styled.span>
                  <styled.label
                                    hasPadding={true}
                  >
                                    strict
                  </styled.label>
                  <StartStrictButton
                                    disabled={false}
                                    power={true}
                                    startButton={false}
                  />
</styled.span>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <styled.label
                      hasPadding={true}
>
                      count
</styled.label>,
                    <Unknown
                      count={0}
                      on={true}
/>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "class",
                    "props": Object {
                      "children": "count",
                      "hasPadding": true,
                    },
                    "ref": null,
                    "rendered": "count",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "function",
                    "props": Object {
                      "count": 0,
                      "on": true,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <styled.label
                      hasPadding={true}
>
                      start
</styled.label>,
                    <StartStrictButton
                      disabled={false}
                      power={true}
                      startButton={true}
                      startGame={[Function]}
/>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "class",
                    "props": Object {
                      "children": "start",
                      "hasPadding": true,
                    },
                    "ref": null,
                    "rendered": "start",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "function",
                    "props": Object {
                      "disabled": false,
                      "power": true,
                      "startButton": true,
                      "startGame": [Function],
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <styled.label
                      hasPadding={true}
>
                      strict
</styled.label>,
                    <StartStrictButton
                      disabled={false}
                      power={true}
                      startButton={false}
/>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "class",
                    "props": Object {
                      "children": "strict",
                      "hasPadding": true,
                    },
                    "ref": null,
                    "rendered": "strict",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": null,
                    "nodeType": "function",
                    "props": Object {
                      "disabled": false,
                      "power": true,
                      "startButton": false,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": null,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <styled.label
                  hasMargin={true}
>
                  off
</styled.label>,
                <OnOffSwitch
                  power={true}
                  powerOnOff={[Function]}
/>,
                <styled.label
                  hasMargin={true}
>
                  on
</styled.label>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": "off",
                  "hasMargin": true,
                },
                "ref": null,
                "rendered": "off",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "function",
                "props": Object {
                  "power": true,
                  "powerOnOff": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": null,
                "nodeType": "class",
                "props": Object {
                  "children": "on",
                  "hasMargin": true,
                },
                "ref": null,
                "rendered": "on",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": null,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <styled.div>
            <styled.span>
                        simon
            </styled.span>
</styled.div>,
          <styled.div>
            <styled.div>
                        <styled.span>
                                    <styled.label
                                                hasPadding={true}
                                    >
                                                count
                                    </styled.label>
                                    <Unknown
                                                count={0}
                                                on={true}
                                    />
                        </styled.span>
                        <styled.span>
                                    <styled.label
                                                hasPadding={true}
                                    >
                                                start
                                    </styled.label>
                                    <StartStrictButton
                                                disabled={false}
                                                power={true}
                                                startButton={true}
                                                startGame={[Function]}
                                    />
                        </styled.span>
                        <styled.span>
                                    <styled.label
                                                hasPadding={true}
                                    >
                                                strict
                                    </styled.label>
                                    <StartStrictButton
                                                disabled={false}
                                                power={true}
                                                startButton={false}
                                    />
                        </styled.span>
            </styled.div>
            <styled.div>
                        <styled.label
                                    hasMargin={true}
                        >
                                    off
                        </styled.label>
                        <OnOffSwitch
                                    power={true}
                                    powerOnOff={[Function]}
                        />
                        <styled.label
                                    hasMargin={true}
                        >
                                    on
                        </styled.label>
            </styled.div>
</styled.div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": <styled.span>
              simon
</styled.span>,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": null,
            "nodeType": "class",
            "props": Object {
              "children": "simon",
            },
            "ref": null,
            "rendered": "simon",
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": null,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.div>
                <styled.span>
                                <styled.label
                                                hasPadding={true}
                                >
                                                count
                                </styled.label>
                                <Unknown
                                                count={0}
                                                on={true}
                                />
                </styled.span>
                <styled.span>
                                <styled.label
                                                hasPadding={true}
                                >
                                                start
                                </styled.label>
                                <StartStrictButton
                                                disabled={false}
                                                power={true}
                                                startButton={true}
                                                startGame={[Function]}
                                />
                </styled.span>
                <styled.span>
                                <styled.label
                                                hasPadding={true}
                                >
                                                strict
                                </styled.label>
                                <StartStrictButton
                                                disabled={false}
                                                power={true}
                                                startButton={false}
                                />
                </styled.span>
</styled.div>,
              <styled.div>
                <styled.label
                                hasMargin={true}
                >
                                off
                </styled.label>
                <OnOffSwitch
                                power={true}
                                powerOnOff={[Function]}
                />
                <styled.label
                                hasMargin={true}
                >
                                on
                </styled.label>
</styled.div>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <styled.span>
                    <styled.label
                                        hasPadding={true}
                    >
                                        count
                    </styled.label>
                    <Unknown
                                        count={0}
                                        on={true}
                    />
</styled.span>,
                  <styled.span>
                    <styled.label
                                        hasPadding={true}
                    >
                                        start
                    </styled.label>
                    <StartStrictButton
                                        disabled={false}
                                        power={true}
                                        startButton={true}
                                        startGame={[Function]}
                    />
</styled.span>,
                  <styled.span>
                    <styled.label
                                        hasPadding={true}
                    >
                                        strict
                    </styled.label>
                    <StartStrictButton
                                        disabled={false}
                                        power={true}
                                        startButton={false}
                    />
</styled.span>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <styled.label
                        hasPadding={true}
>
                        count
</styled.label>,
                      <Unknown
                        count={0}
                        on={true}
/>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "class",
                      "props": Object {
                        "children": "count",
                        "hasPadding": true,
                      },
                      "ref": null,
                      "rendered": "count",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "function",
                      "props": Object {
                        "count": 0,
                        "on": true,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <styled.label
                        hasPadding={true}
>
                        start
</styled.label>,
                      <StartStrictButton
                        disabled={false}
                        power={true}
                        startButton={true}
                        startGame={[Function]}
/>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "class",
                      "props": Object {
                        "children": "start",
                        "hasPadding": true,
                      },
                      "ref": null,
                      "rendered": "start",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "function",
                      "props": Object {
                        "disabled": false,
                        "power": true,
                        "startButton": true,
                        "startGame": [Function],
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <styled.label
                        hasPadding={true}
>
                        strict
</styled.label>,
                      <StartStrictButton
                        disabled={false}
                        power={true}
                        startButton={false}
/>,
                    ],
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "class",
                      "props": Object {
                        "children": "strict",
                        "hasPadding": true,
                      },
                      "ref": null,
                      "rendered": "strict",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": null,
                      "nodeType": "function",
                      "props": Object {
                        "disabled": false,
                        "power": true,
                        "startButton": false,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": null,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <styled.label
                    hasMargin={true}
>
                    off
</styled.label>,
                  <OnOffSwitch
                    power={true}
                    powerOnOff={[Function]}
/>,
                  <styled.label
                    hasMargin={true}
>
                    on
</styled.label>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "class",
                  "props": Object {
                    "children": "off",
                    "hasMargin": true,
                  },
                  "ref": null,
                  "rendered": "off",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "function",
                  "props": Object {
                    "power": true,
                    "powerOnOff": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": null,
                  "nodeType": "class",
                  "props": Object {
                    "children": "on",
                    "hasMargin": true,
                  },
                  "ref": null,
                  "rendered": "on",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
